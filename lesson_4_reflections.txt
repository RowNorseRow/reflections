1. When would you want to use a remote repository rather than keeping all your work local?

	It would be advantageous to use a remote repository when you have multiple people or computers working on a similar project and you want to be able to see all commits made by others from their own local repositories. It could also be useful if you are wanting to get some feedback on your current projects before you finalize the project.
	
2. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	You would want to pull manually because i allows you only pull what commits you choose instead of having a constantly updating and chaningn file where you can sometimes lose certain commits or at least not notice those changes have been made. 

3. Describe the differences between forks, clones, and branches. When would you use one instead of another?

	- A fork is a clone that only is only available through one GitHub repository to another GitHub repository. You'd use this to access someone elses repository while still giving them the original credot of the file even after you have edited it.
	- A clone is a copy of one entire repository whether it be a remote or local repository. 
	- A branch is where you can make modifications to an existing file without affecting the original repository. 

4. What is the benefit of having a copy of the last known state of the remote stored locally? 

	Being able to modify the file while having the most up to date version and being able to edit that file even while offline with its last known modifications. 

5. How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	You could manually send the repository via a zip file via email, google drive, or any other cloud sharing platform. It would be much harder to go this route as collaboration would take much longer as you would have to constatly go back to update the repository with each new addition and it would be more time consuming as compared to having a list of all commits both locally and remote to interact with jsut a few keystrokes. 

6. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	When you are working with some experimental idea without affecting the overall project. This allows you to make small incremental changes or even drastic changes to the original project without having to worry about breaking the program if you do something wrong. Working in the master branch is only beneficial if you are making very small changes and know exactly how it is going to work before moving forward. On another hand having too many branches can cause things to get too over-cluttered.	 	