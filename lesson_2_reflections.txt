1. What happens when you initialize a repository? Why do you need to do it?

	It creates a a new git repository. To be able to make and track commits to your repository.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area differs from the working directory in that it pulls files from the working directory and tracks them before being commited to the repository. It can be very valuable in that it allows you to make sure you have the files you want before you commit them to the repository. 

3. How can you use the staging area to make sure you have one commit per logical change?

	By running 'git diff' you can can ensure what changes have been made before making a commit since it is being tracked in the staging area thus allowing you to view your changes via 'git diff' before you make a commit.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When working on a new addition to the prior commit without fear of it affecting the master branch commits. They help by keeping a separate commit list that allows you to work on a global piece without effecting the rest of the working code. 

5. How do the diagrams help you visualize the branch structure?

	The help you to see what parent commit is related to the current commit you are working on and which branches will and will not be effected by those changes. 

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The result is that the branch that you had modified the code will now be at the head of the master branch or whichever two branches you are merging together. You represent it in a linear fashion because each branch has a parent commit and merging the two will join commits from both brnaches into one branch which is viewed chronologically regardless of how they appeared when each branch was separrate. 

7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging has its benefits in taht it will allow you to merge two identitical commits, but will not allow you to merge is two files have different edits to them which helps keep the original file uncluttered. Manually doing merges would take longer but also allow you to make sure everything is correct between the two files before continuing. 
